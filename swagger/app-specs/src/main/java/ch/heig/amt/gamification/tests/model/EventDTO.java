/*
 * AMT
 * Gamification App
 *
 * OpenAPI spec version: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.heig.amt.gamification.tests.model;

import java.util.Objects;
import ch.heig.amt.gamification.tests.model.PropertyEntity;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.threeten.bp.OffsetDateTime;

/**
 * An event created when an user does something on the application
 */
@ApiModel(description = "An event created when an user does something on the application")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-01-21T12:18:58.316+01:00")
public class EventDTO {
  @SerializedName("user")
  private String user = null;

  @SerializedName("type")
  private String type = null;

  @SerializedName("timestamp")
  private OffsetDateTime timestamp = null;

  @SerializedName("properties")
  private List<PropertyEntity> properties = null;

  public EventDTO user(String user) {
    this.user = user;
    return this;
  }

   /**
   * Username
   * @return user
  **/
  @ApiModelProperty(value = "Username")
  public String getUser() {
    return user;
  }

  public void setUser(String user) {
    this.user = user;
  }

  public EventDTO type(String type) {
    this.type = type;
    return this;
  }

   /**
   * The type of the event
   * @return type
  **/
  @ApiModelProperty(value = "The type of the event")
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }

  public EventDTO timestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Event timestamp
   * @return timestamp
  **/
  @ApiModelProperty(value = "Event timestamp")
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  public EventDTO properties(List<PropertyEntity> properties) {
    this.properties = properties;
    return this;
  }

  public EventDTO addPropertiesItem(PropertyEntity propertiesItem) {
    if (this.properties == null) {
      this.properties = new ArrayList<PropertyEntity>();
    }
    this.properties.add(propertiesItem);
    return this;
  }

   /**
   * Get properties
   * @return properties
  **/
  @ApiModelProperty(value = "")
  public List<PropertyEntity> getProperties() {
    return properties;
  }

  public void setProperties(List<PropertyEntity> properties) {
    this.properties = properties;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDTO eventDTO = (EventDTO) o;
    return Objects.equals(this.user, eventDTO.user) &&
        Objects.equals(this.type, eventDTO.type) &&
        Objects.equals(this.timestamp, eventDTO.timestamp) &&
        Objects.equals(this.properties, eventDTO.properties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(user, type, timestamp, properties);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDTO {\n");
    
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

