/*
 * AMT
 * Gamification App
 *
 * OpenAPI spec version: 0.1.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.heig.amt.gamification;

import ch.heig.amt.gamification.tests.ApiCallback;
import ch.heig.amt.gamification.tests.ApiClient;
import ch.heig.amt.gamification.tests.ApiException;
import ch.heig.amt.gamification.tests.ApiResponse;
import ch.heig.amt.gamification.tests.Configuration;
import ch.heig.amt.gamification.tests.Pair;
import ch.heig.amt.gamification.tests.ProgressRequestBody;
import ch.heig.amt.gamification.tests.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import ch.heig.amt.gamification.tests.model.BadgeDTO;
import ch.heig.amt.gamification.tests.model.EventDTO;
import ch.heig.amt.gamification.tests.model.PointScaleDTO;
import ch.heig.amt.gamification.tests.model.RuleDTO;
import ch.heig.amt.gamification.tests.model.UserDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for badgesDelete
     * @param xGamificationToken Token Auth (required)
     * @param name Badge name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call badgesDeleteCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/badges"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call badgesDeleteValidateBeforeCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling badgesDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling badgesDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = badgesDeleteCall(xGamificationToken, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes specific badge
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Badge name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void badgesDelete(String xGamificationToken, String name) throws ApiException {
        badgesDeleteWithHttpInfo(xGamificationToken, name);
    }

    /**
     * Deletes specific badge
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Badge name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> badgesDeleteWithHttpInfo(String xGamificationToken, String name) throws ApiException {
        com.squareup.okhttp.Call call = badgesDeleteValidateBeforeCall(xGamificationToken, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes specific badge (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Badge name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call badgesDeleteAsync(String xGamificationToken, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = badgesDeleteValidateBeforeCall(xGamificationToken, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for badgesGet
     * @param xGamificationToken Token Auth (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call badgesGetCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call badgesGetValidateBeforeCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling badgesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = badgesGetCall(xGamificationToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all badges linked to current application
     * 
     * @param xGamificationToken Token Auth (required)
     * @return List&lt;BadgeDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BadgeDTO> badgesGet(String xGamificationToken) throws ApiException {
        ApiResponse<List<BadgeDTO>> resp = badgesGetWithHttpInfo(xGamificationToken);
        return resp.getData();
    }

    /**
     * List all badges linked to current application
     * 
     * @param xGamificationToken Token Auth (required)
     * @return ApiResponse&lt;List&lt;BadgeDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BadgeDTO>> badgesGetWithHttpInfo(String xGamificationToken) throws ApiException {
        com.squareup.okhttp.Call call = badgesGetValidateBeforeCall(xGamificationToken, null, null);
        Type localVarReturnType = new TypeToken<List<BadgeDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all badges linked to current application (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call badgesGetAsync(String xGamificationToken, final ApiCallback<List<BadgeDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = badgesGetValidateBeforeCall(xGamificationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BadgeDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for badgesPost
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call badgesPostCall(String xGamificationToken, BadgeDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/badges";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call badgesPostValidateBeforeCall(String xGamificationToken, BadgeDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling badgesPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling badgesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = badgesPostCall(xGamificationToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new badge
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void badgesPost(String xGamificationToken, BadgeDTO body) throws ApiException {
        badgesPostWithHttpInfo(xGamificationToken, body);
    }

    /**
     * Create new badge
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> badgesPostWithHttpInfo(String xGamificationToken, BadgeDTO body) throws ApiException {
        com.squareup.okhttp.Call call = badgesPostValidateBeforeCall(xGamificationToken, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create new badge (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call badgesPostAsync(String xGamificationToken, BadgeDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = badgesPostValidateBeforeCall(xGamificationToken, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for eventsPost
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call eventsPostCall(String xGamificationToken, EventDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call eventsPostValidateBeforeCall(String xGamificationToken, EventDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling eventsPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling eventsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = eventsPostCall(xGamificationToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create an event
     * Create event triggered by user action for a given application
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void eventsPost(String xGamificationToken, EventDTO body) throws ApiException {
        eventsPostWithHttpInfo(xGamificationToken, body);
    }

    /**
     * Create an event
     * Create event triggered by user action for a given application
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> eventsPostWithHttpInfo(String xGamificationToken, EventDTO body) throws ApiException {
        com.squareup.okhttp.Call call = eventsPostValidateBeforeCall(xGamificationToken, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create an event (asynchronously)
     * Create event triggered by user action for a given application
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call eventsPostAsync(String xGamificationToken, EventDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = eventsPostValidateBeforeCall(xGamificationToken, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pointScalesGet
     * @param xGamificationToken Token Auth (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pointScalesGetCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pointScales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pointScalesGetValidateBeforeCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling pointScalesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = pointScalesGetCall(xGamificationToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List point scales linked to current application
     * 
     * @param xGamificationToken Token Auth (required)
     * @return List&lt;PointScaleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<PointScaleDTO> pointScalesGet(String xGamificationToken) throws ApiException {
        ApiResponse<List<PointScaleDTO>> resp = pointScalesGetWithHttpInfo(xGamificationToken);
        return resp.getData();
    }

    /**
     * List point scales linked to current application
     * 
     * @param xGamificationToken Token Auth (required)
     * @return ApiResponse&lt;List&lt;PointScaleDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<PointScaleDTO>> pointScalesGetWithHttpInfo(String xGamificationToken) throws ApiException {
        com.squareup.okhttp.Call call = pointScalesGetValidateBeforeCall(xGamificationToken, null, null);
        Type localVarReturnType = new TypeToken<List<PointScaleDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List point scales linked to current application (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pointScalesGetAsync(String xGamificationToken, final ApiCallback<List<PointScaleDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pointScalesGetValidateBeforeCall(xGamificationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<PointScaleDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pointScalesNameDelete
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pointScalesNameDeleteCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pointScales/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pointScalesNameDeleteValidateBeforeCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling pointScalesNameDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling pointScalesNameDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = pointScalesNameDeleteCall(xGamificationToken, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Deletes specific point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pointScalesNameDelete(String xGamificationToken, String name) throws ApiException {
        pointScalesNameDeleteWithHttpInfo(xGamificationToken, name);
    }

    /**
     * Deletes specific point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pointScalesNameDeleteWithHttpInfo(String xGamificationToken, String name) throws ApiException {
        com.squareup.okhttp.Call call = pointScalesNameDeleteValidateBeforeCall(xGamificationToken, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes specific point scale (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pointScalesNameDeleteAsync(String xGamificationToken, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pointScalesNameDeleteValidateBeforeCall(xGamificationToken, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pointScalesNameGet
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pointScalesNameGetCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/pointScales/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pointScalesNameGetValidateBeforeCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling pointScalesNameGet(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling pointScalesNameGet(Async)");
        }
        

        com.squareup.okhttp.Call call = pointScalesNameGetCall(xGamificationToken, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch specific point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @return PointScaleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public PointScaleDTO pointScalesNameGet(String xGamificationToken, String name) throws ApiException {
        ApiResponse<PointScaleDTO> resp = pointScalesNameGetWithHttpInfo(xGamificationToken, name);
        return resp.getData();
    }

    /**
     * Fetch specific point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @return ApiResponse&lt;PointScaleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<PointScaleDTO> pointScalesNameGetWithHttpInfo(String xGamificationToken, String name) throws ApiException {
        com.squareup.okhttp.Call call = pointScalesNameGetValidateBeforeCall(xGamificationToken, name, null, null);
        Type localVarReturnType = new TypeToken<PointScaleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch specific point scale (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pointScalesNameGetAsync(String xGamificationToken, String name, final ApiCallback<PointScaleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pointScalesNameGetValidateBeforeCall(xGamificationToken, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<PointScaleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pointScalesNamePost
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param body Required informations (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pointScalesNamePostCall(String xGamificationToken, String name, PointScaleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/pointScales/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pointScalesNamePostValidateBeforeCall(String xGamificationToken, String name, PointScaleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling pointScalesNamePost(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling pointScalesNamePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pointScalesNamePost(Async)");
        }
        

        com.squareup.okhttp.Call call = pointScalesNamePostCall(xGamificationToken, name, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update specific point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param body Required informations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pointScalesNamePost(String xGamificationToken, String name, PointScaleDTO body) throws ApiException {
        pointScalesNamePostWithHttpInfo(xGamificationToken, name, body);
    }

    /**
     * Update specific point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param body Required informations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pointScalesNamePostWithHttpInfo(String xGamificationToken, String name, PointScaleDTO body) throws ApiException {
        com.squareup.okhttp.Call call = pointScalesNamePostValidateBeforeCall(xGamificationToken, name, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update specific point scale (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Point scale name (required)
     * @param body Required informations (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pointScalesNamePostAsync(String xGamificationToken, String name, PointScaleDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pointScalesNamePostValidateBeforeCall(xGamificationToken, name, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pointScalesPost
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pointScalesPostCall(String xGamificationToken, PointScaleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/pointScales";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pointScalesPostValidateBeforeCall(String xGamificationToken, PointScaleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling pointScalesPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling pointScalesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = pointScalesPostCall(xGamificationToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pointScalesPost(String xGamificationToken, PointScaleDTO body) throws ApiException {
        pointScalesPostWithHttpInfo(xGamificationToken, body);
    }

    /**
     * Create point scale
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pointScalesPostWithHttpInfo(String xGamificationToken, PointScaleDTO body) throws ApiException {
        com.squareup.okhttp.Call call = pointScalesPostValidateBeforeCall(xGamificationToken, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create point scale (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pointScalesPostAsync(String xGamificationToken, PointScaleDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pointScalesPostValidateBeforeCall(xGamificationToken, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for rulesGet
     * @param xGamificationToken Token Auth (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rulesGetCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rulesGetValidateBeforeCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling rulesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = rulesGetCall(xGamificationToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List events rules linked to current application
     * 
     * @param xGamificationToken Token Auth (required)
     * @return List&lt;RuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<RuleDTO> rulesGet(String xGamificationToken) throws ApiException {
        ApiResponse<List<RuleDTO>> resp = rulesGetWithHttpInfo(xGamificationToken);
        return resp.getData();
    }

    /**
     * List events rules linked to current application
     * 
     * @param xGamificationToken Token Auth (required)
     * @return ApiResponse&lt;List&lt;RuleDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<RuleDTO>> rulesGetWithHttpInfo(String xGamificationToken) throws ApiException {
        com.squareup.okhttp.Call call = rulesGetValidateBeforeCall(xGamificationToken, null, null);
        Type localVarReturnType = new TypeToken<List<RuleDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List events rules linked to current application (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rulesGetAsync(String xGamificationToken, final ApiCallback<List<RuleDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rulesGetValidateBeforeCall(xGamificationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<RuleDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rulesNameDelete
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rulesNameDeleteCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rulesNameDeleteValidateBeforeCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling rulesNameDelete(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling rulesNameDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = rulesNameDeleteCall(xGamificationToken, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete specific event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void rulesNameDelete(String xGamificationToken, String name) throws ApiException {
        rulesNameDeleteWithHttpInfo(xGamificationToken, name);
    }

    /**
     * Delete specific event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> rulesNameDeleteWithHttpInfo(String xGamificationToken, String name) throws ApiException {
        com.squareup.okhttp.Call call = rulesNameDeleteValidateBeforeCall(xGamificationToken, name, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete specific event rule (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rulesNameDeleteAsync(String xGamificationToken, String name, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rulesNameDeleteValidateBeforeCall(xGamificationToken, name, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for rulesNameGet
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rulesNameGetCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rulesNameGetValidateBeforeCall(String xGamificationToken, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling rulesNameGet(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling rulesNameGet(Async)");
        }
        

        com.squareup.okhttp.Call call = rulesNameGetCall(xGamificationToken, name, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch specific event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @return RuleDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public RuleDTO rulesNameGet(String xGamificationToken, String name) throws ApiException {
        ApiResponse<RuleDTO> resp = rulesNameGetWithHttpInfo(xGamificationToken, name);
        return resp.getData();
    }

    /**
     * Fetch specific event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @return ApiResponse&lt;RuleDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<RuleDTO> rulesNameGetWithHttpInfo(String xGamificationToken, String name) throws ApiException {
        com.squareup.okhttp.Call call = rulesNameGetValidateBeforeCall(xGamificationToken, name, null, null);
        Type localVarReturnType = new TypeToken<RuleDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch specific event rule (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rulesNameGetAsync(String xGamificationToken, String name, final ApiCallback<RuleDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rulesNameGetValidateBeforeCall(xGamificationToken, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<RuleDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for rulesNamePost
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param body URL of the modified event rule (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rulesNamePostCall(String xGamificationToken, String name, RuleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rules/{name}"
            .replaceAll("\\{" + "name" + "\\}", apiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rulesNamePostValidateBeforeCall(String xGamificationToken, String name, RuleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling rulesNamePost(Async)");
        }
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling rulesNamePost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rulesNamePost(Async)");
        }
        

        com.squareup.okhttp.Call call = rulesNamePostCall(xGamificationToken, name, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update specific event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param body URL of the modified event rule (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void rulesNamePost(String xGamificationToken, String name, RuleDTO body) throws ApiException {
        rulesNamePostWithHttpInfo(xGamificationToken, name, body);
    }

    /**
     * Update specific event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param body URL of the modified event rule (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> rulesNamePostWithHttpInfo(String xGamificationToken, String name, RuleDTO body) throws ApiException {
        com.squareup.okhttp.Call call = rulesNamePostValidateBeforeCall(xGamificationToken, name, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update specific event rule (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param name Event rule name (required)
     * @param body URL of the modified event rule (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rulesNamePostAsync(String xGamificationToken, String name, RuleDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rulesNamePostValidateBeforeCall(xGamificationToken, name, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for rulesPost
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call rulesPostCall(String xGamificationToken, RuleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rules/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rulesPostValidateBeforeCall(String xGamificationToken, RuleDTO body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling rulesPost(Async)");
        }
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rulesPost(Async)");
        }
        

        com.squareup.okhttp.Call call = rulesPostCall(xGamificationToken, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a new event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void rulesPost(String xGamificationToken, RuleDTO body) throws ApiException {
        rulesPostWithHttpInfo(xGamificationToken, body);
    }

    /**
     * Create a new event rule
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> rulesPostWithHttpInfo(String xGamificationToken, RuleDTO body) throws ApiException {
        com.squareup.okhttp.Call call = rulesPostValidateBeforeCall(xGamificationToken, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Create a new event rule (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param body Required informations (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rulesPostAsync(String xGamificationToken, RuleDTO body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rulesPostValidateBeforeCall(xGamificationToken, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for usersGet
     * @param xGamificationToken Token Auth (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersGetCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersGetValidateBeforeCall(String xGamificationToken, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling usersGet(Async)");
        }
        

        com.squareup.okhttp.Call call = usersGetCall(xGamificationToken, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List all users linked to current application
     * List all users linked to current application
     * @param xGamificationToken Token Auth (required)
     * @return List&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<UserDTO> usersGet(String xGamificationToken) throws ApiException {
        ApiResponse<List<UserDTO>> resp = usersGetWithHttpInfo(xGamificationToken);
        return resp.getData();
    }

    /**
     * List all users linked to current application
     * List all users linked to current application
     * @param xGamificationToken Token Auth (required)
     * @return ApiResponse&lt;List&lt;UserDTO&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<UserDTO>> usersGetWithHttpInfo(String xGamificationToken) throws ApiException {
        com.squareup.okhttp.Call call = usersGetValidateBeforeCall(xGamificationToken, null, null);
        Type localVarReturnType = new TypeToken<List<UserDTO>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List all users linked to current application (asynchronously)
     * List all users linked to current application
     * @param xGamificationToken Token Auth (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersGetAsync(String xGamificationToken, final ApiCallback<List<UserDTO>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersGetValidateBeforeCall(xGamificationToken, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<UserDTO>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for usersIdGet
     * @param xGamificationToken Token Auth (required)
     * @param id User ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call usersIdGetCall(String xGamificationToken, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xGamificationToken != null)
        localVarHeaderParams.put("X-Gamification-Token", apiClient.parameterToString(xGamificationToken));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call usersIdGetValidateBeforeCall(String xGamificationToken, String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'xGamificationToken' is set
        if (xGamificationToken == null) {
            throw new ApiException("Missing the required parameter 'xGamificationToken' when calling usersIdGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling usersIdGet(Async)");
        }
        

        com.squareup.okhttp.Call call = usersIdGetCall(xGamificationToken, id, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Fetch specific user
     * 
     * @param xGamificationToken Token Auth (required)
     * @param id User ID (required)
     * @return UserDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public UserDTO usersIdGet(String xGamificationToken, String id) throws ApiException {
        ApiResponse<UserDTO> resp = usersIdGetWithHttpInfo(xGamificationToken, id);
        return resp.getData();
    }

    /**
     * Fetch specific user
     * 
     * @param xGamificationToken Token Auth (required)
     * @param id User ID (required)
     * @return ApiResponse&lt;UserDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<UserDTO> usersIdGetWithHttpInfo(String xGamificationToken, String id) throws ApiException {
        com.squareup.okhttp.Call call = usersIdGetValidateBeforeCall(xGamificationToken, id, null, null);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Fetch specific user (asynchronously)
     * 
     * @param xGamificationToken Token Auth (required)
     * @param id User ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call usersIdGetAsync(String xGamificationToken, String id, final ApiCallback<UserDTO> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = usersIdGetValidateBeforeCall(xGamificationToken, id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<UserDTO>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
