/*
 * AMT
 * Gamification App
 *
 * OpenAPI spec version: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package ch.heig.amt.gamification;

import ch.heig.amt.gamification.tests.ApiException;
import ch.heig.amt.gamification.tests.api.DefaultApi;
import ch.heig.amt.gamification.tests.model.BadgeDTO;
import ch.heig.amt.gamification.tests.model.EventDTO;
import ch.heig.amt.gamification.tests.model.PointScaleDTO;
import ch.heig.amt.gamification.tests.model.RuleDTO;
import ch.heig.amt.gamification.tests.model.RuleResponseDTO;
import ch.heig.amt.gamification.tests.model.UserDTO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final ch.heig.amt.gamification.tests.api.DefaultApi api = new DefaultApi();

    
    /**
     * List all badges linked to current application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void badgesGetTest() throws ApiException {
        String xGamificationToken = null;
        List<BadgeDTO> response = api.badgesGet(xGamificationToken);

        // TODO: test validations
    }
    
    /**
     * Deletes specific badge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void badgesIdDeleteTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        api.badgesIdDelete(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * Update a given badge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void badgesIdPutTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        BadgeDTO body = null;
        api.badgesIdPut(xGamificationToken, id, body);

        // TODO: test validations
    }
    
    /**
     * Create new badge
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void badgesPostTest() throws ApiException {
        String xGamificationToken = null;
        BadgeDTO body = null;
        api.badgesPost(xGamificationToken, body);

        // TODO: test validations
    }
    
    /**
     * Create an event
     *
     * Create event triggered by user action for a given application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void eventsPostTest() throws ApiException {
        String xGamificationToken = null;
        EventDTO body = null;
        api.eventsPost(xGamificationToken, body);

        // TODO: test validations
    }
    
    /**
     * List point scales linked to current application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pointScalesGetTest() throws ApiException {
        String xGamificationToken = null;
        List<PointScaleDTO> response = api.pointScalesGet(xGamificationToken);

        // TODO: test validations
    }
    
    /**
     * Deletes specific point scale
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pointScalesIdDeleteTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        api.pointScalesIdDelete(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * Fetch specific point scale
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pointScalesIdGetTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        PointScaleDTO response = api.pointScalesIdGet(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * Update specific point scale
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pointScalesIdPutTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        PointScaleDTO body = null;
        api.pointScalesIdPut(xGamificationToken, id, body);

        // TODO: test validations
    }
    
    /**
     * Create point scale
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pointScalesPostTest() throws ApiException {
        String xGamificationToken = null;
        PointScaleDTO body = null;
        api.pointScalesPost(xGamificationToken, body);

        // TODO: test validations
    }
    
    /**
     * List events rules linked to current application
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesGetTest() throws ApiException {
        String xGamificationToken = null;
        List<RuleResponseDTO> response = api.rulesGet(xGamificationToken);

        // TODO: test validations
    }
    
    /**
     * Delete specific event rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesIdDeleteTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        api.rulesIdDelete(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * Fetch specific event rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesIdGetTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        RuleResponseDTO response = api.rulesIdGet(xGamificationToken, id);

        // TODO: test validations
    }
    
    /**
     * Update specific event rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesIdPutTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        RuleDTO body = null;
        api.rulesIdPut(xGamificationToken, id, body);

        // TODO: test validations
    }
    
    /**
     * Create a new event rule
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rulesPostTest() throws ApiException {
        String xGamificationToken = null;
        RuleDTO body = null;
        api.rulesPost(xGamificationToken, body);

        // TODO: test validations
    }
    
    /**
     * List all users linked to current application
     *
     * List all users linked to current application
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersGetTest() throws ApiException {
        String xGamificationToken = null;
        List<UserDTO> response = api.usersGet(xGamificationToken);

        // TODO: test validations
    }
    
    /**
     * Fetch specific user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void usersIdGetTest() throws ApiException {
        String xGamificationToken = null;
        Integer id = null;
        UserDTO response = api.usersIdGet(xGamificationToken, id);

        // TODO: test validations
    }
    
}
