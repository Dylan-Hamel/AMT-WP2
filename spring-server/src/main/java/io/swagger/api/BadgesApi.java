/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Badge;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import java.util.List;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-01-08T14:04:10.019+01:00")

@Api(value = "badges", description = "the badges API")
public interface BadgesApi {

    @ApiOperation(value = "List all badges linked to current application", notes = "", response = Badge.class, responseContainer = "List", tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully", response = Badge.class, responseContainer = "List") })
    
    @RequestMapping(value = "/badges/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<List<Badge>> badgesGet();


    @ApiOperation(value = "Deletes specific badge", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully done", response = Void.class),
        @ApiResponse(code = 404, message = "No such badge", response = Void.class) })
    
    @RequestMapping(value = "/badges/{name}/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    ResponseEntity<Void> badgesNameDelete(@ApiParam(value = "Badge name",required=true ) @PathVariable("name") String name);


    @ApiOperation(value = "Fetch specific badge", notes = "", response = Badge.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully done", response = Badge.class),
        @ApiResponse(code = 404, message = "No such badge", response = Void.class) })
    
    @RequestMapping(value = "/badges/{name}/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    ResponseEntity<Badge> badgesNameGet(@ApiParam(value = "Badge name",required=true ) @PathVariable("name") String name);


    @ApiOperation(value = "Update specific badge", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully done", response = Void.class),
        @ApiResponse(code = 404, message = "No such badge", response = Void.class),
        @ApiResponse(code = 409, message = "Badge already existing", response = Void.class) })
    
    @RequestMapping(value = "/badges/{name}/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> badgesNamePost(@ApiParam(value = "Badge name",required=true ) @PathVariable("name") String name,@ApiParam(value = "Required informations" ,required=true )  @Valid @RequestBody Badge body);


    @ApiOperation(value = "Create new badge", notes = "", response = Void.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successfully done", response = Void.class),
        @ApiResponse(code = 409, message = "Badge already existing", response = Void.class) })
    
    @RequestMapping(value = "/badges/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> badgesPost(@ApiParam(value = "Required informations" ,required=true )  @Valid @RequestBody Badge body);

}
